{"mappings":"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","sources":["src/js/app.js"],"sourcesContent":["/**\n * WEB222 â€“ Assignment 04\n *\n * I declare that this assignment is my own work in accordance with\n * Seneca Academic Policy. No part of this assignment has been\n * copied manually or electronically from any other source\n * (including web sites) or distributed to other students.\n *\n * Please update the following with your information:\n *\n *      Name:       Tzuyi Lin\n *      Student ID: 127201234\n *      Date:       2024/11/01\n */\n\n// All of our data is available on the global `window` object.\n// Create local variables to work with it in this file.\nconst { artists, songs } = window;\n\n// For debugging, display all of our data in the console. You can remove this later.\nconsole.log({ artists, songs }, \"App Data\");\n\nlet chosenArtist = artists.length > 1 ? artists[0] : null;\n\nfunction createArtistsBar() {\n  const menuElement = document.getElementById(\"menu\");\n  menuElement.innerHTML = \"\";\n\n  // Create artists buttons\n  artists.forEach((artist) => {\n    const buttonElement = document.createElement(\"button\");\n    buttonElement.textContent = artist.name;\n    if (artist.artistId === chosenArtist.artistId) {\n      buttonElement.disabled = true;\n    } else {\n      buttonElement.disabled = false;\n      buttonElement.addEventListener(\"click\", () => {\n        chosenArtist = artist;\n        if (chosenArtist) {\n          createArtistsBar();\n          createSongTable();\n        }\n      });\n    }\n\n    menuElement.appendChild(buttonElement);\n  });\n}\n\nfunction createSongTable() {\n  // Dynamically update the selected category title\n  const chosenArtistElement = document.getElementById(\"selected-artist\");\n  const linksHTML = chosenArtist.urls\n    .map((url) => `<a href=\"${url.url}\">${url.name}</a>`)\n    .join(\", \");\n  chosenArtistElement.innerHTML = `${chosenArtist.name} (${linksHTML})`;\n\n  // Clear the current rows\n  const songsElement = document.getElementById(\"songs\");\n  songsElement.innerHTML = \"\";\n\n  // Filter Songs Array\n  const filteredSongs = songs.filter(\n    (song) => chosenArtist.artistId.includes(song.artistId) && !song.explicit\n  );\n\n  // Create Table Rows\n  filteredSongs.forEach((song) => {\n    const songCard = createSongCard(song);\n\n    songCard.addEventListener(\"click\", () => {\n      window.location.href = song.url;\n    });\n\n    songsElement.appendChild(songCard);\n  });\n}\n\nfunction createSongCard(song) {\n  const card = document.createElement(\"div\");\n  card.classList.add(\"card\");\n\n  const cardImg = document.createElement(\"div\");\n  cardImg.classList.add(\"card_image\");\n  const songImg = document.createElement(\"img\");\n  songImg.src = song.imageUrl;\n  cardImg.appendChild(songImg);\n  card.appendChild(cardImg);\n\n  const content = document.createElement(\"div\");\n  content.classList.add(\"content\");\n  card.appendChild(content);\n\n  const songTitle = document.createElement(\"h3\");\n  songTitle.innerText = song.title;\n  content.appendChild(songTitle);\n\n  const info = document.createElement(\"div\");\n  info.classList.add(\"info\");\n  content.appendChild(info);\n\n  const songTime = document.createElement(\"span\");\n  songTime.textContent = song.year;\n  info.appendChild(songTime);\n\n  const songDuration = document.createElement(\"span\");\n  const min = parseInt(song.duration / 60);\n  const sec = song.duration % 60;\n  songDuration.textContent = `${min}:${sec > 9 ? sec : `0${sec}`}`;\n  info.appendChild(songDuration);\n  return card;\n}\n\nif (chosenArtist) {\n  createArtistsBar();\n  createSongTable();\n}\n"],"names":[],"version":3,"file":"index.8f0c9192.js.map","sourceRoot":"/__parcel_source_root/"}